{"ast":null,"code":"import axios from 'axios';\nimport { stringToDatetimeLocal, extractDateString } from './utils';\nimport rootURL from './url'; // GET /calendar/event/list/{user}\n\nasync function getCalendarEventList(user) {\n  const url = `${rootURL}/calendar/event/list/${user}`;\n\n  try {\n    const response = await axios.get(url);\n    const rtnArr = Array.isArray(response === null || response === void 0 ? void 0 : response.data) ? response === null || response === void 0 ? void 0 : response.data : [];\n    return rtnArr;\n  } catch (err) {\n    // throw new Error(`Error when calling ${url}`);\n    return [];\n  }\n} // POST /calendar/event/create/{user}\n\n\nasync function postCalendarEventCreate(user, eventName, eventColor) {\n  const url = `${rootURL}/calendar/event/create/${user}`;\n\n  try {\n    const sendEvent = {\n      color: eventColor,\n      name: eventName\n    };\n    const response = await axios.post(url, sendEvent);\n    const recEvent = response.data;\n    return recEvent;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n} // GET /calendar/event/{event_id}/{user}\n\n\nasync function getCalendarEventEventID(eventID, user) {\n  const url = `${rootURL}/calendar/event/${eventID}/${user}`;\n\n  try {\n    const response = await axios.get(url);\n    const eventObj = response.data;\n    return eventObj;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n} // PUT /calendar/event/{event_id}/{user}\n// Function is called \"post\" for legacy reasons\n\n\nasync function postCalendarEventEventID(eventID, user, eventName, eventColor) {\n  const url = `${rootURL}/calendar/event/${eventID}/${user}`;\n\n  try {\n    const sendEvent = {\n      color: eventColor,\n      name: eventName\n    };\n    const response = await axios.put(url, sendEvent);\n    const recEvent = response.data;\n    return recEvent;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n} // DELETE /calendar/event/{event_id}/{user}\n\n\nasync function deleteCalendarEventEventID(eventID, user) {\n  const url = `${rootURL}/calendar/event/${eventID}/${user}`;\n\n  try {\n    const response = await axios.delete(url);\n    return response.data || response.status;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n} // GET /calendar/blob/list/{date}/{user}\n\n\nasync function getCalendarBlobList(date, user) {\n  // console.log(date);\n  const url = `${rootURL}/calendar/blob/list/${extractDateString(date)}/${user}`;\n\n  try {\n    const response = await axios.get(url);\n    let rtnArr = (response === null || response === void 0 ? void 0 : response.data) || []; // console.log(rtnArr);\n\n    rtnArr = rtnArr.sort((a, b) => stringToDatetimeLocal(a.time.start).valueOf() - stringToDatetimeLocal(b.time.start).valueOf());\n    return rtnArr;\n  } catch (err) {\n    // throw new Error(`Error when calling ${url}`);\n    // console.log(err);\n    return [];\n  }\n} // POST /calendar/blob/create/{event_id}/{user}\n\n\nasync function postCalendarBlobCreate(eventID, user, startDateTime, endDateTime) {\n  const url = `${rootURL}/calendar/blob/create/${eventID}/${user}`;\n\n  try {\n    const sendBlob = {\n      time: {\n        start: startDateTime,\n        end: endDateTime\n      }\n    };\n    const response = await axios.post(url, sendBlob);\n    const recBlob = response.data;\n    return recBlob;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n} // GET /calendar/blob/{blob_id}/{event_id}/{user}\n\n\nasync function getCalendarBlobBlobID(blobID, eventID, user) {\n  const url = `${rootURL}/calendar/blob/${blobID}/${eventID}/${user}`;\n\n  try {\n    const response = await axios.get(url);\n    const blobObj = response.data;\n    return blobObj;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n} // PUT /calendar/blob/{blob_id}/{event_id}/{user}\n// Function is called \"post\" for legacy reasons\n\n\nasync function postCalendarBlobBlobID(blobID, eventID, user, startDateTime, endDateTime) {\n  const url = `${rootURL}/calendar/blob/${blobID}/${eventID}/${user}`;\n\n  try {\n    const sendBlob = {\n      time: {\n        start: startDateTime,\n        end: endDateTime\n      }\n    };\n    const response = await axios.put(url, sendBlob);\n    const recBlob = response.data;\n    return recBlob;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n} // DELETE /calendar/blob/{blob_id}/{event_id}/{user}\n\n\nasync function deleteCalendarBlobBlobID(blobID, eventID, user) {\n  const url = `${rootURL}/calendar/blob/${blobID}/${eventID}/${user}`;\n\n  try {\n    const response = await axios.delete(url);\n    return response.data || response.status;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n}\n\nexport { getCalendarEventList, postCalendarEventCreate, getCalendarEventEventID, postCalendarEventEventID, deleteCalendarEventEventID, getCalendarBlobList, postCalendarBlobCreate, getCalendarBlobBlobID, postCalendarBlobBlobID, deleteCalendarBlobBlobID };","map":{"version":3,"sources":["C:/Users/pojoj/Documents/CIS350APP/naurrrwhalsAppDeployment/naur-app/src/modules/calendarApi.js"],"names":["axios","stringToDatetimeLocal","extractDateString","rootURL","getCalendarEventList","user","url","response","get","rtnArr","Array","isArray","data","err","postCalendarEventCreate","eventName","eventColor","sendEvent","color","name","post","recEvent","Error","getCalendarEventEventID","eventID","eventObj","postCalendarEventEventID","put","deleteCalendarEventEventID","delete","status","getCalendarBlobList","date","sort","a","b","time","start","valueOf","postCalendarBlobCreate","startDateTime","endDateTime","sendBlob","end","recBlob","getCalendarBlobBlobID","blobID","blobObj","postCalendarBlobBlobID","deleteCalendarBlobBlobID"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { stringToDatetimeLocal, extractDateString } from './utils';\r\n\r\nimport rootURL from './url';\r\n\r\n// GET /calendar/event/list/{user}\r\nasync function getCalendarEventList(user) {\r\n  const url = `${rootURL}/calendar/event/list/${user}`;\r\n  try {\r\n    const response = await axios.get(url);\r\n    const rtnArr = Array.isArray(response?.data) ? response?.data : [];\r\n    return rtnArr;\r\n  } catch (err) {\r\n    // throw new Error(`Error when calling ${url}`);\r\n    return [];\r\n  }\r\n}\r\n\r\n// POST /calendar/event/create/{user}\r\nasync function postCalendarEventCreate(user, eventName, eventColor) {\r\n  const url = `${rootURL}/calendar/event/create/${user}`;\r\n  try {\r\n    const sendEvent = { color: eventColor, name: eventName };\r\n    const response = await axios.post(url, sendEvent);\r\n    const recEvent = response.data;\r\n    return recEvent;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// GET /calendar/event/{event_id}/{user}\r\nasync function getCalendarEventEventID(eventID, user) {\r\n  const url = `${rootURL}/calendar/event/${eventID}/${user}`;\r\n  try {\r\n    const response = await axios.get(url);\r\n    const eventObj = response.data;\r\n    return eventObj;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// PUT /calendar/event/{event_id}/{user}\r\n// Function is called \"post\" for legacy reasons\r\nasync function postCalendarEventEventID(eventID, user, eventName, eventColor) {\r\n  const url = `${rootURL}/calendar/event/${eventID}/${user}`;\r\n  try {\r\n    const sendEvent = { color: eventColor, name: eventName };\r\n    const response = await axios.put(url, sendEvent);\r\n    const recEvent = response.data;\r\n    return recEvent;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// DELETE /calendar/event/{event_id}/{user}\r\nasync function deleteCalendarEventEventID(eventID, user) {\r\n  const url = `${rootURL}/calendar/event/${eventID}/${user}`;\r\n  try {\r\n    const response = await axios.delete(url);\r\n    return response.data || response.status;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// GET /calendar/blob/list/{date}/{user}\r\nasync function getCalendarBlobList(date, user) {\r\n  // console.log(date);\r\n  const url = `${rootURL}/calendar/blob/list/${extractDateString(date)}/${user}`;\r\n  try {\r\n    const response = await axios.get(url);\r\n    let rtnArr = response?.data || [];\r\n    // console.log(rtnArr);\r\n    rtnArr = rtnArr.sort((a, b) => (\r\n      stringToDatetimeLocal(a.time.start).valueOf()\r\n      - stringToDatetimeLocal(b.time.start).valueOf()\r\n    ));\r\n    return rtnArr;\r\n  } catch (err) {\r\n    // throw new Error(`Error when calling ${url}`);\r\n    // console.log(err);\r\n    return [];\r\n  }\r\n}\r\n\r\n// POST /calendar/blob/create/{event_id}/{user}\r\nasync function postCalendarBlobCreate(eventID, user, startDateTime, endDateTime) {\r\n  const url = `${rootURL}/calendar/blob/create/${eventID}/${user}`;\r\n  try {\r\n    const sendBlob = { time: { start: startDateTime, end: endDateTime } };\r\n    const response = await axios.post(url, sendBlob);\r\n    const recBlob = response.data;\r\n    return recBlob;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// GET /calendar/blob/{blob_id}/{event_id}/{user}\r\nasync function getCalendarBlobBlobID(blobID, eventID, user) {\r\n  const url = `${rootURL}/calendar/blob/${blobID}/${eventID}/${user}`;\r\n  try {\r\n    const response = await axios.get(url);\r\n    const blobObj = response.data;\r\n    return blobObj;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// PUT /calendar/blob/{blob_id}/{event_id}/{user}\r\n// Function is called \"post\" for legacy reasons\r\nasync function postCalendarBlobBlobID(blobID, eventID, user, startDateTime, endDateTime) {\r\n  const url = `${rootURL}/calendar/blob/${blobID}/${eventID}/${user}`;\r\n  try {\r\n    const sendBlob = { time: { start: startDateTime, end: endDateTime } };\r\n    const response = await axios.put(url, sendBlob);\r\n    const recBlob = response.data;\r\n    return recBlob;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// DELETE /calendar/blob/{blob_id}/{event_id}/{user}\r\nasync function deleteCalendarBlobBlobID(blobID, eventID, user) {\r\n  const url = `${rootURL}/calendar/blob/${blobID}/${eventID}/${user}`;\r\n  try {\r\n    const response = await axios.delete(url);\r\n    return response.data || response.status;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\nexport {\r\n  getCalendarEventList, postCalendarEventCreate,\r\n  getCalendarEventEventID, postCalendarEventEventID,\r\n  deleteCalendarEventEventID, getCalendarBlobList,\r\n  postCalendarBlobCreate, getCalendarBlobBlobID,\r\n  postCalendarBlobBlobID, deleteCalendarBlobBlobID,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}