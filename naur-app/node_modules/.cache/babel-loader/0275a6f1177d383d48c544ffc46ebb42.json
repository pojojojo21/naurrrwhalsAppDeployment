{"ast":null,"code":"import axios from 'axios';\nimport rootURL from './url';\n\nasync function postRegister(username, password) {\n  const url = `${rootURL}/register`;\n\n  try {\n    const sendUserObj = {\n      username,\n      password\n    };\n    const response = await axios.post(url, sendUserObj);\n    return response.status;\n  } catch (err) {\n    var _err$response;\n\n    const status = err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status;\n\n    if (status === 403) {\n      return status;\n    }\n\n    throw new Error(`Error when calling ${url}`);\n  }\n}\n\nasync function postLogin(username, password) {\n  const url = `${rootURL}/login`;\n\n  try {\n    const sendUserObj = {\n      username,\n      password\n    };\n    const response = await axios.post(url, sendUserObj);\n    return response.status;\n  } catch (err) {\n    var _err$response2;\n\n    const status = err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status;\n\n    if (status === 401 || status === 403 || status === 404) {\n      return status;\n    }\n\n    throw new Error(`Error when calling ${url}`);\n  }\n} // securityQuestions can be one question or an array of questions\n\n\nasync function postSecurityQuestions(username, securityQuestions) {\n  const url = `${rootURL}/securityquestions/${username}`;\n\n  try {\n    const response = await axios.post(url, securityQuestions);\n    return response.status;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n}\n\nasync function getSecurityQuestions(username) {\n  const url = `${rootURL}/securityquestions/${username}`;\n\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n}\n\nasync function postResetPassword(username, newPassword, securityQuestions) {\n  const url = `${rootURL}/resetpassword/${username}`;\n\n  try {\n    const sendObj = {\n      new_password: newPassword,\n      security_questions: securityQuestions\n    };\n    const response = await axios.post(url, sendObj);\n    return response.status;\n  } catch (err) {\n    var _err$response3;\n\n    const status = err === null || err === void 0 ? void 0 : (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.status;\n\n    if (status === 403) {\n      return status;\n    }\n\n    throw new Error(`Error when calling ${url}`);\n  }\n}\n\nasync function deleteUser(username) {\n  const url = `${rootURL}/deleteuser/${username}`;\n\n  try {\n    const response = await axios.delete(url);\n    return response.status;\n  } catch (err) {\n    var _err$response4;\n\n    const status = err === null || err === void 0 ? void 0 : (_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.status;\n\n    if (status === 404) {\n      return status;\n    }\n\n    throw new Error(`Error when calling ${url}`);\n  }\n}\n\nexport { postRegister, postLogin, postSecurityQuestions, getSecurityQuestions, postResetPassword, deleteUser };","map":{"version":3,"sources":["C:/Users/pojoj/Documents/CIS350APP/naurrrwhalsAppDeployment/naur-app/src/modules/loginApi.js"],"names":["axios","rootURL","postRegister","username","password","url","sendUserObj","response","post","status","err","Error","postLogin","postSecurityQuestions","securityQuestions","getSecurityQuestions","get","data","postResetPassword","newPassword","sendObj","new_password","security_questions","deleteUser","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nimport rootURL from './url';\r\n\r\nasync function postRegister(username, password) {\r\n  const url = `${rootURL}/register`;\r\n  try {\r\n    const sendUserObj = { username, password };\r\n    const response = await axios.post(url, sendUserObj);\r\n    return response.status;\r\n  } catch (err) {\r\n    const status = err?.response?.status;\r\n    if (status === 403) {\r\n      return status;\r\n    }\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\nasync function postLogin(username, password) {\r\n  const url = `${rootURL}/login`;\r\n  try {\r\n    const sendUserObj = { username, password };\r\n    const response = await axios.post(url, sendUserObj);\r\n    return response.status;\r\n  } catch (err) {\r\n    const status = err?.response?.status;\r\n    if (status === 401 || status === 403 || status === 404) {\r\n      return status;\r\n    }\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// securityQuestions can be one question or an array of questions\r\nasync function postSecurityQuestions(username, securityQuestions) {\r\n  const url = `${rootURL}/securityquestions/${username}`;\r\n  try {\r\n    const response = await axios.post(url, securityQuestions);\r\n    return response.status;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\nasync function getSecurityQuestions(username) {\r\n  const url = `${rootURL}/securityquestions/${username}`;\r\n  try {\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\nasync function postResetPassword(username, newPassword, securityQuestions) {\r\n  const url = `${rootURL}/resetpassword/${username}`;\r\n  try {\r\n    const sendObj = { new_password: newPassword, security_questions: securityQuestions };\r\n    const response = await axios.post(url, sendObj);\r\n    return response.status;\r\n  } catch (err) {\r\n    const status = err?.response?.status;\r\n    if (status === 403) {\r\n      return status;\r\n    }\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\nasync function deleteUser(username) {\r\n  const url = `${rootURL}/deleteuser/${username}`;\r\n  try {\r\n    const response = await axios.delete(url);\r\n    return response.status;\r\n  } catch (err) {\r\n    const status = err?.response?.status;\r\n    if (status === 404) {\r\n      return status;\r\n    }\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\nexport {\r\n  postRegister, postLogin,\r\n  postSecurityQuestions, getSecurityQuestions,\r\n  postResetPassword, deleteUser,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}