{"ast":null,"code":"/* eslint-disable object-shorthand */\nimport axios from 'axios';\nimport { getCurrentTimeString, getCurrentDateString } from './timeFuncs';\nimport rootURL from './url';\nexport async function getUserExists(username) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/user/exists/${username}`);\n    return response.data.result;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function postMessagingUser(username) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.post(`${rootURL}/messaging/user/${username}`);\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function deleteMessagingUser(username) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.delete(`${rootURL}/messaging/user/${username}`);\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function getFriendExists(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/friends/exists/${username}/${friendName}`);\n    return response.data.result;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function getPendingExists(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/pending/exists/${username}/${friendName}`);\n    return response.data.result;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function getRequestedExists(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/requested/exists/${username}/${friendName}`);\n    return response.data.result;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function getFriendFirst(username) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/friends/first/${username}`);\n    return response.data.friend;\n  } catch (err) {\n    if (err.response.status === 404) {\n      return undefined;\n    }\n\n    throw new Error('Error sending request');\n  }\n}\nexport async function getPendingFirst(username) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/pending/first/${username}`);\n    return response.data.friend;\n  } catch (err) {\n    if (err.response.status === 404) {\n      return undefined;\n    }\n\n    throw new Error('Error sending request');\n  }\n}\nexport async function getRequestedFirst(username) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/requested/first/${username}`);\n    return response.data.friend;\n  } catch (err) {\n    if (err.response.status === 404) {\n      return undefined;\n    }\n\n    throw new Error('Error sending request');\n  }\n}\nexport async function getFriendList(username) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/friends/list/${username}`);\n    return response.data.list;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function getPendingList(username) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/pending/list/${username}`);\n    return response.data.list;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function getRequestedList(username) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/requested/list/${username}`);\n    return response.data.list;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function putFriend(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.put(`${rootURL}/messaging/friends/${username}/${friendName}`);\n    return;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function putPending(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.put(`${rootURL}/messaging/pending/${username}/${friendName}`);\n    return;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function putRequested(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.put(`${rootURL}/messaging/requested/${username}/${friendName}`);\n    return;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function deleteFriend(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.delete(`${rootURL}/messaging/friends/${username}/${friendName}`);\n    return;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function deletePending(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.delete(`${rootURL}/messaging/pending/${username}/${friendName}`);\n    return;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function deleteRequested(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.delete(`${rootURL}/messaging/requested/${username}/${friendName}`);\n    return;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function undoFriendRequest(username, friendName) {\n  await deletePending(username, friendName);\n  await deleteRequested(friendName, username);\n}\nexport async function getMessageCount(username) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/messagecount/${username}`);\n    return response.data.count;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function getMessageLog(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/messaging/messages/${username}/${friendName}`);\n    return response.data.log;\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function putMessageLog(username, friendName, message) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.put(`${rootURL}/messaging/messages/${username}/${friendName}`, {\n      message: message,\n      date: getCurrentDateString(),\n      time: getCurrentTimeString()\n    });\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function deleteMessageLog(username, friendName) {\n  if (username === undefined) {\n    throw new Error('invalid username');\n  }\n\n  if (friendName === undefined) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.delete(`${rootURL}/messaging/messages/${username}/${friendName}`);\n  } catch (err) {\n    throw new Error('Error sending request');\n  }\n}\nexport async function sendFriendRequest(username, friendName) {\n  // add friendName to pending of username,\n  // add username to requested of friendName\n  await putPending(username, friendName);\n  await putRequested(friendName, username);\n}\nexport async function acceptFriendRequest(username, friendName) {\n  // remove friendName from requested of username\n  // remove username to pending of friendName\n  // add friendName to friends of username\n  // add username to friends of friendName\n  await deleteRequested(username, friendName);\n  await deletePending(friendName, username);\n  await putFriend(username, friendName);\n  await putFriend(friendName, username);\n}\nexport async function rejectFriendRequest(username, friendName) {\n  // remove friendName from requested of username\n  // remove username to pending of friendName\n  await deleteRequested(username, friendName);\n  await deletePending(friendName, username);\n}\nexport async function removeFriendfromFriendList(username, friendName) {\n  // remove friendName from requested of username\n  // remove username to pending of friendName\n  await deleteMessageLog(username, friendName);\n  await deleteFriend(username, friendName);\n  await deleteFriend(friendName, username);\n}","map":{"version":3,"sources":["C:/Users/pojoj/Documents/CIS350APP/naurrrwhalsAppDeployment/naur-app/src/modules/messageApi.js"],"names":["axios","getCurrentTimeString","getCurrentDateString","rootURL","getUserExists","username","undefined","Error","response","get","data","result","err","postMessagingUser","post","deleteMessagingUser","delete","getFriendExists","friendName","getPendingExists","getRequestedExists","getFriendFirst","friend","status","getPendingFirst","getRequestedFirst","getFriendList","list","getPendingList","getRequestedList","putFriend","put","putPending","putRequested","deleteFriend","deletePending","deleteRequested","undoFriendRequest","getMessageCount","count","getMessageLog","log","putMessageLog","message","date","time","deleteMessageLog","sendFriendRequest","acceptFriendRequest","rejectFriendRequest","removeFriendfromFriendList"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,aAA3D;AAEA,OAAOC,OAAP,MAAoB,OAApB;AAEA,OAAO,eAAeC,aAAf,CAA6BC,QAA7B,EAAuC;AAC5C,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,0BAAyBE,QAAS,EAAvD,CAAvB;AACA,WAAOG,QAAQ,CAACE,IAAT,CAAcC,MAArB;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAeM,iBAAf,CAAiCR,QAAjC,EAA2C;AAChD,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMP,KAAK,CAACc,IAAN,CAAY,GAAEX,OAAQ,mBAAkBE,QAAS,EAAjD,CAAN;AACD,GAFD,CAEE,OAAOO,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAeQ,mBAAf,CAAmCV,QAAnC,EAA6C;AAClD,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMP,KAAK,CAACgB,MAAN,CAAc,GAAEb,OAAQ,mBAAkBE,QAAS,EAAnD,CAAN;AACD,GAFD,CAEE,OAAOO,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAeU,eAAf,CAA+BZ,QAA/B,EAAyCa,UAAzC,EAAqD;AAC1D,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,6BAA4BE,QAAS,IAAGa,UAAW,EAAxE,CAAvB;AACA,WAAOV,QAAQ,CAACE,IAAT,CAAcC,MAArB;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAeY,gBAAf,CAAgCd,QAAhC,EAA0Ca,UAA1C,EAAsD;AAC3D,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,6BAA4BE,QAAS,IAAGa,UAAW,EAAxE,CAAvB;AACA,WAAOV,QAAQ,CAACE,IAAT,CAAcC,MAArB;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAea,kBAAf,CAAkCf,QAAlC,EAA4Ca,UAA5C,EAAwD;AAC7D,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,+BAA8BE,QAAS,IAAGa,UAAW,EAA1E,CAAvB;AACA,WAAOV,QAAQ,CAACE,IAAT,CAAcC,MAArB;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAec,cAAf,CAA8BhB,QAA9B,EAAwC;AAC7C,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,4BAA2BE,QAAS,EAAzD,CAAvB;AACA,WAAOG,QAAQ,CAACE,IAAT,CAAcY,MAArB;AACD,GAHD,CAGE,OAAOV,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACJ,QAAJ,CAAae,MAAb,KAAwB,GAA5B,EAAiC;AAC/B,aAAOjB,SAAP;AACD;;AACD,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAeiB,eAAf,CAA+BnB,QAA/B,EAAyC;AAC9C,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,4BAA2BE,QAAS,EAAzD,CAAvB;AACA,WAAOG,QAAQ,CAACE,IAAT,CAAcY,MAArB;AACD,GAHD,CAGE,OAAOV,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACJ,QAAJ,CAAae,MAAb,KAAwB,GAA5B,EAAiC;AAC/B,aAAOjB,SAAP;AACD;;AACD,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAekB,iBAAf,CAAiCpB,QAAjC,EAA2C;AAChD,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,8BAA6BE,QAAS,EAA3D,CAAvB;AACA,WAAOG,QAAQ,CAACE,IAAT,CAAcY,MAArB;AACD,GAHD,CAGE,OAAOV,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACJ,QAAJ,CAAae,MAAb,KAAwB,GAA5B,EAAiC;AAC/B,aAAOjB,SAAP;AACD;;AACD,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAemB,aAAf,CAA6BrB,QAA7B,EAAuC;AAC5C,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,2BAA0BE,QAAS,EAAxD,CAAvB;AACA,WAAOG,QAAQ,CAACE,IAAT,CAAciB,IAArB;AACD,GAHD,CAGE,OAAOf,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAeqB,cAAf,CAA8BvB,QAA9B,EAAwC;AAC7C,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,2BAA0BE,QAAS,EAAxD,CAAvB;AACA,WAAOG,QAAQ,CAACE,IAAT,CAAciB,IAArB;AACD,GAHD,CAGE,OAAOf,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAesB,gBAAf,CAAgCxB,QAAhC,EAA0C;AAC/C,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,6BAA4BE,QAAS,EAA1D,CAAvB;AACA,WAAOG,QAAQ,CAACE,IAAT,CAAciB,IAArB;AACD,GAHD,CAGE,OAAOf,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAeuB,SAAf,CAAyBzB,QAAzB,EAAmCa,UAAnC,EAA+C;AACpD,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMP,KAAK,CAAC+B,GAAN,CAAW,GAAE5B,OAAQ,sBAAqBE,QAAS,IAAGa,UAAW,EAAjE,CAAN;AACA;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAeyB,UAAf,CAA0B3B,QAA1B,EAAoCa,UAApC,EAAgD;AACrD,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMP,KAAK,CAAC+B,GAAN,CAAW,GAAE5B,OAAQ,sBAAqBE,QAAS,IAAGa,UAAW,EAAjE,CAAN;AACA;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAe0B,YAAf,CAA4B5B,QAA5B,EAAsCa,UAAtC,EAAkD;AACvD,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMP,KAAK,CAAC+B,GAAN,CAAW,GAAE5B,OAAQ,wBAAuBE,QAAS,IAAGa,UAAW,EAAnE,CAAN;AACA;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAe2B,YAAf,CAA4B7B,QAA5B,EAAsCa,UAAtC,EAAkD;AACvD,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMP,KAAK,CAACgB,MAAN,CAAc,GAAEb,OAAQ,sBAAqBE,QAAS,IAAGa,UAAW,EAApE,CAAN;AACA;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAe4B,aAAf,CAA6B9B,QAA7B,EAAuCa,UAAvC,EAAmD;AACxD,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMP,KAAK,CAACgB,MAAN,CAAc,GAAEb,OAAQ,sBAAqBE,QAAS,IAAGa,UAAW,EAApE,CAAN;AACA;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAe6B,eAAf,CAA+B/B,QAA/B,EAAyCa,UAAzC,EAAqD;AAC1D,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMP,KAAK,CAACgB,MAAN,CAAc,GAAEb,OAAQ,wBAAuBE,QAAS,IAAGa,UAAW,EAAtE,CAAN;AACA;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAe8B,iBAAf,CAAiChC,QAAjC,EAA2Ca,UAA3C,EAAuD;AAC5D,QAAMiB,aAAa,CAAC9B,QAAD,EAAWa,UAAX,CAAnB;AACA,QAAMkB,eAAe,CAAClB,UAAD,EAAab,QAAb,CAArB;AACD;AAED,OAAO,eAAeiC,eAAf,CAA+BjC,QAA/B,EAAyC;AAC9C,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,2BAA0BE,QAAS,EAAxD,CAAvB;AACA,WAAOG,QAAQ,CAACE,IAAT,CAAc6B,KAArB;AACD,GAHD,CAGE,OAAO3B,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAeiC,aAAf,CAA6BnC,QAA7B,EAAuCa,UAAvC,EAAmD;AACxD,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEN,OAAQ,uBAAsBE,QAAS,IAAGa,UAAW,EAAlE,CAAvB;AACA,WAAOV,QAAQ,CAACE,IAAT,CAAc+B,GAArB;AACD,GAHD,CAGE,OAAO7B,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAemC,aAAf,CAA6BrC,QAA7B,EAAuCa,UAAvC,EAAmDyB,OAAnD,EAA4D;AACjE,MAAItC,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMP,KAAK,CAAC+B,GAAN,CACH,GAAE5B,OAAQ,uBAAsBE,QAAS,IAAGa,UAAW,EADpD,EAEJ;AAAEyB,MAAAA,OAAO,EAAEA,OAAX;AAAoBC,MAAAA,IAAI,EAAE1C,oBAAoB,EAA9C;AAAkD2C,MAAAA,IAAI,EAAE5C,oBAAoB;AAA5E,KAFI,CAAN;AAID,GALD,CAKE,OAAOW,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAeuC,gBAAf,CAAgCzC,QAAhC,EAA0Ca,UAA1C,EAAsD;AAC3D,MAAIb,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIW,UAAU,KAAKZ,SAAnB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAI;AACF,UAAMP,KAAK,CAACgB,MAAN,CAAc,GAAEb,OAAQ,uBAAsBE,QAAS,IAAGa,UAAW,EAArE,CAAN;AACD,GAFD,CAEE,OAAON,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED,OAAO,eAAewC,iBAAf,CAAiC1C,QAAjC,EAA2Ca,UAA3C,EAAuD;AAC5D;AACA;AACA,QAAMc,UAAU,CAAC3B,QAAD,EAAWa,UAAX,CAAhB;AACA,QAAMe,YAAY,CAACf,UAAD,EAAab,QAAb,CAAlB;AACD;AAED,OAAO,eAAe2C,mBAAf,CAAmC3C,QAAnC,EAA6Ca,UAA7C,EAAyD;AAC9D;AACA;AACA;AACA;AACA,QAAMkB,eAAe,CAAC/B,QAAD,EAAWa,UAAX,CAArB;AACA,QAAMiB,aAAa,CAACjB,UAAD,EAAab,QAAb,CAAnB;AACA,QAAMyB,SAAS,CAACzB,QAAD,EAAWa,UAAX,CAAf;AACA,QAAMY,SAAS,CAACZ,UAAD,EAAab,QAAb,CAAf;AACD;AAED,OAAO,eAAe4C,mBAAf,CAAmC5C,QAAnC,EAA6Ca,UAA7C,EAAyD;AAC9D;AACA;AACA,QAAMkB,eAAe,CAAC/B,QAAD,EAAWa,UAAX,CAArB;AACA,QAAMiB,aAAa,CAACjB,UAAD,EAAab,QAAb,CAAnB;AACD;AAED,OAAO,eAAe6C,0BAAf,CAA0C7C,QAA1C,EAAoDa,UAApD,EAAgE;AACrE;AACA;AACA,QAAM4B,gBAAgB,CAACzC,QAAD,EAAWa,UAAX,CAAtB;AACA,QAAMgB,YAAY,CAAC7B,QAAD,EAAWa,UAAX,CAAlB;AACA,QAAMgB,YAAY,CAAChB,UAAD,EAAab,QAAb,CAAlB;AACD","sourcesContent":["/* eslint-disable object-shorthand */\r\nimport axios from 'axios';\r\nimport { getCurrentTimeString, getCurrentDateString } from './timeFuncs';\r\n\r\nimport rootURL from './url';\r\n\r\nexport async function getUserExists(username) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/user/exists/${username}`);\r\n    return response.data.result;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function postMessagingUser(username) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    await axios.post(`${rootURL}/messaging/user/${username}`);\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function deleteMessagingUser(username) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    await axios.delete(`${rootURL}/messaging/user/${username}`);\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function getFriendExists(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/friends/exists/${username}/${friendName}`);\r\n    return response.data.result;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function getPendingExists(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/pending/exists/${username}/${friendName}`);\r\n    return response.data.result;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function getRequestedExists(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/requested/exists/${username}/${friendName}`);\r\n    return response.data.result;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function getFriendFirst(username) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/friends/first/${username}`);\r\n    return response.data.friend;\r\n  } catch (err) {\r\n    if (err.response.status === 404) {\r\n      return undefined;\r\n    }\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function getPendingFirst(username) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/pending/first/${username}`);\r\n    return response.data.friend;\r\n  } catch (err) {\r\n    if (err.response.status === 404) {\r\n      return undefined;\r\n    }\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function getRequestedFirst(username) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/requested/first/${username}`);\r\n    return response.data.friend;\r\n  } catch (err) {\r\n    if (err.response.status === 404) {\r\n      return undefined;\r\n    }\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function getFriendList(username) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/friends/list/${username}`);\r\n    return response.data.list;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function getPendingList(username) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/pending/list/${username}`);\r\n    return response.data.list;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function getRequestedList(username) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/requested/list/${username}`);\r\n    return response.data.list;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function putFriend(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    await axios.put(`${rootURL}/messaging/friends/${username}/${friendName}`);\r\n    return;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function putPending(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    await axios.put(`${rootURL}/messaging/pending/${username}/${friendName}`);\r\n    return;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function putRequested(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    await axios.put(`${rootURL}/messaging/requested/${username}/${friendName}`);\r\n    return;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function deleteFriend(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    await axios.delete(`${rootURL}/messaging/friends/${username}/${friendName}`);\r\n    return;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function deletePending(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    await axios.delete(`${rootURL}/messaging/pending/${username}/${friendName}`);\r\n    return;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function deleteRequested(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    await axios.delete(`${rootURL}/messaging/requested/${username}/${friendName}`);\r\n    return;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function undoFriendRequest(username, friendName) {\r\n  await deletePending(username, friendName);\r\n  await deleteRequested(friendName, username);\r\n}\r\n\r\nexport async function getMessageCount(username) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/messagecount/${username}`);\r\n    return response.data.count;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function getMessageLog(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    const response = await axios.get(`${rootURL}/messaging/messages/${username}/${friendName}`);\r\n    return response.data.log;\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function putMessageLog(username, friendName, message) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    await axios.put(\r\n      `${rootURL}/messaging/messages/${username}/${friendName}`,\r\n      { message: message, date: getCurrentDateString(), time: getCurrentTimeString() },\r\n    );\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function deleteMessageLog(username, friendName) {\r\n  if (username === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  if (friendName === undefined) {\r\n    throw new Error('invalid username');\r\n  }\r\n  try {\r\n    await axios.delete(`${rootURL}/messaging/messages/${username}/${friendName}`);\r\n  } catch (err) {\r\n    throw new Error('Error sending request');\r\n  }\r\n}\r\n\r\nexport async function sendFriendRequest(username, friendName) {\r\n  // add friendName to pending of username,\r\n  // add username to requested of friendName\r\n  await putPending(username, friendName);\r\n  await putRequested(friendName, username);\r\n}\r\n\r\nexport async function acceptFriendRequest(username, friendName) {\r\n  // remove friendName from requested of username\r\n  // remove username to pending of friendName\r\n  // add friendName to friends of username\r\n  // add username to friends of friendName\r\n  await deleteRequested(username, friendName);\r\n  await deletePending(friendName, username);\r\n  await putFriend(username, friendName);\r\n  await putFriend(friendName, username);\r\n}\r\n\r\nexport async function rejectFriendRequest(username, friendName) {\r\n  // remove friendName from requested of username\r\n  // remove username to pending of friendName\r\n  await deleteRequested(username, friendName);\r\n  await deletePending(friendName, username);\r\n}\r\n\r\nexport async function removeFriendfromFriendList(username, friendName) {\r\n  // remove friendName from requested of username\r\n  // remove username to pending of friendName\r\n  await deleteMessageLog(username, friendName);\r\n  await deleteFriend(username, friendName);\r\n  await deleteFriend(friendName, username);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}