{"ast":null,"code":"/* eslint-disable camelcase */\nimport axios from 'axios';\nimport rootURL from './url'; // GET /tasks/taskList/{user}\n// get tasklist\n\nasync function getTaskList(user) {\n  const url = `${rootURL}/tasks/tasklist/${user}`;\n\n  try {\n    const response = await axios.get(url);\n    const rtnArr = Array.isArray(response === null || response === void 0 ? void 0 : response.data) ? response === null || response === void 0 ? void 0 : response.data : [];\n    return rtnArr;\n  } catch (err) {\n    return [];\n  }\n} // GET /tasks/{task_id}/{user}\n// get tasklist\n\n\nasync function getTask(user, task_id) {\n  const url = `${rootURL}/tasks/${task_id}/${user}`;\n\n  try {\n    const response = await axios.get(url);\n    const rtnArr = Array.isArray(response === null || response === void 0 ? void 0 : response.data) ? response === null || response === void 0 ? void 0 : response.data : [];\n    return rtnArr;\n  } catch (err) {\n    return [];\n  }\n} // POST /tasks/create/{user}\n// create new task\n\n\nasync function postNewTask(user, taskObj) {\n  const url = `${rootURL}/tasks/create/${user}`;\n\n  try {\n    const response = await axios.post(url, taskObj);\n    return response.status;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n} // DELETE /tasks/{task_id}/{user}\n// delete task\n\n\nasync function deleteTask(user, task_id) {\n  const url = `${rootURL}/tasks/${task_id}/${user}`;\n\n  try {\n    const response = await axios.delete(url);\n    return response.status;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n} // POST /tasks/{task_id}/{user}\n// update existing task\n\n\nasync function putTask(user, task_id, newTask) {\n  const url = `${rootURL}/tasks/${task_id}/${user}`;\n\n  try {\n    const response = await axios.put(url, newTask);\n    return response.status;\n  } catch (err) {\n    throw new Error(`Error when calling ${url}`);\n  }\n} // For compatibility\n\n\nconst postUpdateTask = putTask;\nexport { getTask, getTaskList, postNewTask, deleteTask, putTask, postUpdateTask };","map":{"version":3,"sources":["C:/Users/pojoj/Documents/CIS350APP/naurrrwhalsAppDeployment/naur-app/src/modules/taskApi.js"],"names":["axios","rootURL","getTaskList","user","url","response","get","rtnArr","Array","isArray","data","err","getTask","task_id","postNewTask","taskObj","post","status","Error","deleteTask","delete","putTask","newTask","put","postUpdateTask"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,OAApB,C,CAEA;AACA;;AACA,eAAeC,WAAf,CAA2BC,IAA3B,EAAiC;AAC/B,QAAMC,GAAG,GAAI,GAAEH,OAAQ,mBAAkBE,IAAK,EAA9C;;AACA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUF,GAAV,CAAvB;AACA,UAAMG,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcJ,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAEK,IAAxB,IAAgCL,QAAhC,aAAgCA,QAAhC,uBAAgCA,QAAQ,CAAEK,IAA1C,GAAiD,EAAhE;AACA,WAAOH,MAAP;AACD,GAJD,CAIE,OAAOI,GAAP,EAAY;AACZ,WAAO,EAAP;AACD;AACF,C,CAED;AACA;;;AACA,eAAeC,OAAf,CAAuBT,IAAvB,EAA6BU,OAA7B,EAAsC;AACpC,QAAMT,GAAG,GAAI,GAAEH,OAAQ,UAASY,OAAQ,IAAGV,IAAK,EAAhD;;AACA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUF,GAAV,CAAvB;AACA,UAAMG,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcJ,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAEK,IAAxB,IAAgCL,QAAhC,aAAgCA,QAAhC,uBAAgCA,QAAQ,CAAEK,IAA1C,GAAiD,EAAhE;AACA,WAAOH,MAAP;AACD,GAJD,CAIE,OAAOI,GAAP,EAAY;AACZ,WAAO,EAAP;AACD;AACF,C,CAED;AACA;;;AACA,eAAeG,WAAf,CAA2BX,IAA3B,EAAiCY,OAAjC,EAA0C;AACxC,QAAMX,GAAG,GAAI,GAAEH,OAAQ,iBAAgBE,IAAK,EAA5C;;AACA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAML,KAAK,CAACgB,IAAN,CAAWZ,GAAX,EAAgBW,OAAhB,CAAvB;AACA,WAAOV,QAAQ,CAACY,MAAhB;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZ,UAAM,IAAIO,KAAJ,CAAW,sBAAqBd,GAAI,EAApC,CAAN;AACD;AACF,C,CAED;AACA;;;AACA,eAAee,UAAf,CAA0BhB,IAA1B,EAAgCU,OAAhC,EAAyC;AACvC,QAAMT,GAAG,GAAI,GAAEH,OAAQ,UAASY,OAAQ,IAAGV,IAAK,EAAhD;;AACA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAML,KAAK,CAACoB,MAAN,CAAahB,GAAb,CAAvB;AACA,WAAOC,QAAQ,CAACY,MAAhB;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZ,UAAM,IAAIO,KAAJ,CAAW,sBAAqBd,GAAI,EAApC,CAAN;AACD;AACF,C,CAED;AACA;;;AACA,eAAeiB,OAAf,CAAuBlB,IAAvB,EAA6BU,OAA7B,EAAsCS,OAAtC,EAA+C;AAC7C,QAAMlB,GAAG,GAAI,GAAEH,OAAQ,UAASY,OAAQ,IAAGV,IAAK,EAAhD;;AACA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAML,KAAK,CAACuB,GAAN,CAAUnB,GAAV,EAAekB,OAAf,CAAvB;AACA,WAAOjB,QAAQ,CAACY,MAAhB;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZ,UAAM,IAAIO,KAAJ,CAAW,sBAAqBd,GAAI,EAApC,CAAN;AACD;AACF,C,CAED;;;AACA,MAAMoB,cAAc,GAAGH,OAAvB;AAEA,SACET,OADF,EACWV,WADX,EACwBY,WADxB,EACqCK,UADrC,EACiDE,OADjD,EAC0DG,cAD1D","sourcesContent":["/* eslint-disable camelcase */\r\nimport axios from 'axios';\r\n\r\nimport rootURL from './url';\r\n\r\n// GET /tasks/taskList/{user}\r\n// get tasklist\r\nasync function getTaskList(user) {\r\n  const url = `${rootURL}/tasks/tasklist/${user}`;\r\n  try {\r\n    const response = await axios.get(url);\r\n    const rtnArr = Array.isArray(response?.data) ? response?.data : [];\r\n    return rtnArr;\r\n  } catch (err) {\r\n    return [];\r\n  }\r\n}\r\n\r\n// GET /tasks/{task_id}/{user}\r\n// get tasklist\r\nasync function getTask(user, task_id) {\r\n  const url = `${rootURL}/tasks/${task_id}/${user}`;\r\n  try {\r\n    const response = await axios.get(url);\r\n    const rtnArr = Array.isArray(response?.data) ? response?.data : [];\r\n    return rtnArr;\r\n  } catch (err) {\r\n    return [];\r\n  }\r\n}\r\n\r\n// POST /tasks/create/{user}\r\n// create new task\r\nasync function postNewTask(user, taskObj) {\r\n  const url = `${rootURL}/tasks/create/${user}`;\r\n  try {\r\n    const response = await axios.post(url, taskObj);\r\n    return response.status;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// DELETE /tasks/{task_id}/{user}\r\n// delete task\r\nasync function deleteTask(user, task_id) {\r\n  const url = `${rootURL}/tasks/${task_id}/${user}`;\r\n  try {\r\n    const response = await axios.delete(url);\r\n    return response.status;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// POST /tasks/{task_id}/{user}\r\n// update existing task\r\nasync function putTask(user, task_id, newTask) {\r\n  const url = `${rootURL}/tasks/${task_id}/${user}`;\r\n  try {\r\n    const response = await axios.put(url, newTask);\r\n    return response.status;\r\n  } catch (err) {\r\n    throw new Error(`Error when calling ${url}`);\r\n  }\r\n}\r\n\r\n// For compatibility\r\nconst postUpdateTask = putTask;\r\n\r\nexport {\r\n  getTask, getTaskList, postNewTask, deleteTask, putTask, postUpdateTask,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}